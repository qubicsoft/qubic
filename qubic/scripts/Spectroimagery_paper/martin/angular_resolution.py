# coding: utf-8
import healpy as hp
import numpy as np
import matplotlib
from matplotlib import gridspec
import matplotlib.pyplot as mp
# Use latex in plots
mp.rc('text', usetex = True)
import qubic
import os
import sys
import pylab
from qubic.io import *
from scipy.optimize import curve_fit
import random as rd
from scipy.interpolate import interp1d
from resolution import *

# Prepare dictionary to decently run (because RAM memory and time)
d = qubic.qubicdict.qubicDict()
d.read_from_file(sys.argv[1])

# Parameters
name = NameRun(d)#'20190311_{}TEST_{}'.format(str(int(d['filter_nu']/1e9)), d['nhwp_angles'])
name += 'testing'
print 'Name', name
nsideLow, nsideHigh, reso, size, sigma2fwhm = Parameters(d) #reso = 1.5 size= 200

# Call calibration methods with the same parameters that current run. 
# If you use a calibration file with same {reso, nsideHigh, nsideLow and (RA, DEC)} that your run,
# you should put BoolCal = False
BoolCal = True

if BoolCal:
	#Files used to calibrate
	FitCalib = 'fit_calibration.py'
	SigmaCalib = 'sigma_calibration.py'

	# Excecutionof FitCalib and SigmaCalib
	os.system('python ' + FitCalib + ' ' + sys.argv[1])
	os.system('python ' + SigmaCalib + ' ' + sys.argv[1])
	#Get name of calibration files (same generated by upper lines)
	namefit = NameCalib(method = 'fit')
	namesigma = NameCalib(method = 'sigma')
	print('Fit calibration file used: {}'.format(FitCalib))
	print('Sigma calibration file used: {}'.format(SigmaCalib))

elif not BoolCal:
	namefit = '20190326_fitcalibration.txt'
	namesigma = '20190326_sigmacalibration.txt'

print('Dictionary used: {}'.format(sys.argv[1]))
print('Fit table for interpolation: {}'.format(namefit))
print('Sigma table for interpolation: {}'.format(namesigma))

interpNusFit, interpDeltaFwhmFit, interpStdFit = np.loadtxt(namefit, unpack=True)
interpNusSig, interpDeltaFwhmSig, interpStdSig = np.loadtxt(namesigma, unpack=True)
f_fit = interp1d(interpNusFit, interpDeltaFwhmFit, kind = 'cubic')
f_sig = interp1d(interpNusSig, interpDeltaFwhmSig, kind = 'cubic')

## noitalopretnI

# Build input maps 
center_gal = qubic.equ2gal(d['RA_center'], d['DEC_center'])
Nbfreq_in, nus_edge_in, nus_in, deltas_in, Delta_in, Nbbands_in = qubic.compute_freq(d['filter_nu']/1e9, d['nf_sub'],
    d['filter_relative_bandwidth']) 

# Generate the 16 input maps
input_maps = np.empty((d['nf_sub'],size,size))
m0 = np.empty((d['nf_sub'],12*nsideLow**2,3))

input_maps, m0 = GenerateMaps(d, nus_in)

fwhm_real = 61.347409/nus_in

# Call Fit method
input_fwhm_fit = np.empty((d['nf_sub']))
input_fwhm_fit = FitMethod(input_maps,d)

# Call Sigma method
input_fwhm_sigma = np.empty((d['nf_sub']))
input_fwhm_sigma = SigmaMethod(input_maps, d)

# Do Fit interpolation
f_intStd =  interp1d(interpNusFit, interpStdFit, kind='cubic')
stdFitInput = f_intStd(nus_in)
DeltaFitInpCorrect = f_fit(nus_in)

# Do Sigma interpolation
DeltaSigInpCorrect = f_sig(nus_in)

fig = mp.figure(figsize=(8, 6)) 
grid = mp.GridSpec(4, 1)
ax0 = mp.subplot(grid[:3,0])
ax0.set_ylabel(r'FWHM [deg]')
ax0.set_title(r'Fit method (input)')
ax0.plot(nus_in,fwhm_real,'ko', label=r'FWHM$_{r}$')
ax0.plot(nus_in,input_fwhm_fit-DeltaFitInpCorrect, 'rs', label=r'FWHM correct')
ax0.plot(nus_in,input_fwhm_fit, 'rs', alpha = 0.4, label=r'FWHM Measured')
ax0.legend(loc = 'upper right')
ax1 = mp.subplot(grid[3,0])
ax1.set_ylabel(r'FWHM$_{\rm cor}$-FWHM$_{\rm meas}$')
ax1.set_xlabel(r'$\nu$[GHz]')
ax1.plot(nus_in, fwhm_real-fwhm_real, 'k--',alpha =0.4)
ax1.errorbar(nus_in,input_fwhm_fit - DeltaFitInpCorrect - fwhm_real, yerr = stdFitInput, fmt='rs--')
mp.subplots_adjust(hspace=0.)
InputMeasureFit = name+'fit-nf16-input'
print 'Measure input map (using Fit method) in {}'.format(InputMeasureFit)
mp.savefig(InputMeasureFit)

fig = mp.figure(figsize=(8, 6)) 
grid = mp.GridSpec(4, 1)
ax0 = mp.subplot(grid[:3,0])
ax0.set_ylabel(r'FWHM [deg]')
ax0.set_title(r'Sigma method (input)')
ax0.plot(nus_in,fwhm_real,'ko', label=r'FWHM$_{r}$')
ax0.plot(nus_in,input_fwhm_sigma-DeltaSigInpCorrect, 'bs', label=r'FWHM correct')
ax0.plot(nus_in,input_fwhm_sigma, 'bs', alpha = 0.4, label=r'FWHM Measured')
ax0.legend(loc = 'upper right')
ax1 = mp.subplot(grid[3,0])
ax1.set_ylabel(r'FWHM$_{\rm cor}$-FWHM$_{\rm meas}$')
ax1.set_xlabel(r'$\nu$[GHz]')
ax1.plot(nus_in, fwhm_real-fwhm_real, 'k--',alpha =0.4)
ax1.plot(nus_in, (input_fwhm_sigma-DeltaSigInpCorrect) - fwhm_real, 'bs--')
mp.subplots_adjust(hspace=0.)
InputMeasureSigma = name+'sigma-nf16-input'
print 'Measure input map (using Sigma method) in {}'.format(InputMeasureSigma)
mp.savefig(InputMeasureSigma)

# recons map

q = qubic.QubicMultibandInstrument(d)
p = qubic.get_pointing(d)
s = qubic.QubicScene(d)

a = qubic.QubicMultibandAcquisition(q, p, s, d, nus_edge_in)

m0[:,:,1] =m0[:,:,0]
m0[:,:,2] =m0[:,:,0]
x0 = m0

TOD1 = a.get_observation(x0, convolution=False, noiseless=False)

sub_band = [2,3,4,5,6,7]

nus_PLOTALL = []
_fwhm_PLOTALL = []
_fwhmFit_mPLOTALL = []
_fwhmSigma_mPLOTALL = []
_deltaFit_PLOTALL = []
_deltaSigma_PLOTALL = []

for nf_i in sub_band:
	print 'Working reconstructing = ', nf_i, ' freq.'
	Nbfreq, nus_edge, nus, deltas, Delta, Nbbands = qubic.compute_freq(d['filter_nu']/1e9, 
	                                                                nf_i, d['filter_relative_bandwidth'])
	                                                              
	arec = qubic.QubicMultibandAcquisition(q, p, s, d, nus_edge) 
	
	maps_recon1 = arec.tod2map(TOD1, tol=d['tol'], maxiter=5000)
	
	cov = a.get_coverage()
	cov = np.sum(cov, axis=0)
	maxcov = np.max(cov)
	unseen = cov < maxcov*0.1
	
	if len(maps_recon1.shape) == 2: maps_recon1 = np.reshape(maps_recon1, (1, maps_recon1.shape[0], maps_recon1.shape[1]))
	
	for h in maps_recon1:
		h[unseen,:] = hp.UNSEEN
	
	maps_recons = np.empty((nf_i,size,size))
	
	for j, mapa in enumerate(maps_recon1):
		maps_recons[j] = hp.gnomview(mapa[:,0], rot = center_gal,  
	                        reso = 1.5, xsize = size,
	                        return_projected_map=True)
	mp.close('all')
	
	fwhm_fit = np.zeros((nf_i))
	fwhm_fit = FitMethod(maps_recons,d)
	 
	fwhm_sigma = np.zeros((nf_i))
	fwhm_sigma = SigmaMethod(maps_recons, d)    
	
	fwhmFitRecCorrect = f_fit(nus)
	
	_fwhm_ = 61.347409/nus

	np.savetxt(name+'-nf16nrec{}-fit.txt'.format(len(nus)), np.asarray([nus, _fwhm_, fwhm_fit]).T, header='\t nus \t fwhm_r \t fwhm_m')
	
	
	fwhmSigmaRecCorrect = f_sig(nus)
	
	_fwhm_ = 61.347409/nus

	np.savetxt(name+'-nf16nrec{}-sigma.txt'.format(len(nus)), np.asarray([nus, _fwhm_, fwhm_sigma]).T, header='\t nus \t fwhm_r \t fwhm_m')
	
	nus_PLOTALL.append(nus)
	_fwhm_PLOTALL.append(_fwhm_)
	_fwhmFit_mPLOTALL.append(fwhm_fit)
	_fwhmSigma_mPLOTALL.append(fwhm_sigma)
	_deltaFit_PLOTALL.append(fwhmFitRecCorrect)
	_deltaSigma_PLOTALL.append(fwhmSigmaRecCorrect)

	del Nbfreq, nus_edge, nus, deltas, Delta, Nbbands, arec, maps_recon1, cov, fwhmFitRecCorrect, fwhmSigmaRecCorrect

fig = mp.figure(figsize=(12, 8)) 
grid = mp.GridSpec(3, 2)

frmat = 'rs--'

fig.suptitle('Fit method (nside = {})'.format(d['nside']))

ax0 = mp.subplot(grid[0,0])
ax0.set_ylabel(r'FWHM [deg]')
ax0.plot(nus_PLOTALL[0],_fwhm_PLOTALL[0],'ko', label = r'FWHM real')
ax0.plot(nus_PLOTALL[0],_fwhmFit_mPLOTALL[0], frmat, alpha = 0.4, label= r'FWHM Measured')
ax0.plot(nus_PLOTALL[0],_fwhmFit_mPLOTALL[0] - _deltaFit_PLOTALL[0], frmat, label = r'FWHM Unbiased')
ax0.legend(loc = 'upper right')
	
ax1 = mp.subplot(grid[0,1])
ax1.plot(nus_PLOTALL[1],_fwhm_PLOTALL[1],'ko')
ax1.plot(nus_PLOTALL[1],_fwhmFit_mPLOTALL[1], frmat, alpha = 0.4)
ax1.plot(nus_PLOTALL[1],_fwhmFit_mPLOTALL[1] - _deltaFit_PLOTALL[1], frmat)

ax2 = mp.subplot(grid[1:2,0])
ax2.set_ylabel(r'FWHM [deg]')
ax2.plot(nus_PLOTALL[2],_fwhm_PLOTALL[2],'ko')
ax2.plot(nus_PLOTALL[2],_fwhmFit_mPLOTALL[2], frmat, alpha = 0.4)
ax2.plot(nus_PLOTALL[2],_fwhmFit_mPLOTALL[2] - _deltaFit_PLOTALL[2], frmat)

ax3 = mp.subplot(grid[1:2,1])
ax3.plot(nus_PLOTALL[3],_fwhm_PLOTALL[3],'ko')
ax3.plot(nus_PLOTALL[3],_fwhmFit_mPLOTALL[3], frmat, alpha = 0.4)
ax3.plot(nus_PLOTALL[3],_fwhmFit_mPLOTALL[3] - _deltaFit_PLOTALL[3], frmat)

ax4 = mp.subplot(grid[2:3,0])
ax4.set_ylabel(r'FWHM [deg]')
ax4.set_xlabel(r'$\nu$[GHz]')
ax4.set_ylabel(r'FWHM [deg]')
ax4.plot(nus_PLOTALL[4],_fwhm_PLOTALL[4],'ko')
ax4.plot(nus_PLOTALL[4],_fwhmFit_mPLOTALL[4], frmat, alpha = 0.4)
ax4.plot(nus_PLOTALL[4],_fwhmFit_mPLOTALL[4] - _deltaFit_PLOTALL[4], frmat)

ax5 = mp.subplot(grid[2:3,1])
ax5.set_xlabel(r'$\nu$[GHz]')
ax5.plot(nus_PLOTALL[5],_fwhm_PLOTALL[5],'ko')
ax5.plot(nus_PLOTALL[5],_fwhmFit_mPLOTALL[5], frmat, alpha = 0.4)
ax5.plot(nus_PLOTALL[5],_fwhmFit_mPLOTALL[5] - _deltaFit_PLOTALL[5], frmat)

alph = 0.2
ls=':'
for i in nus_in:
    ax0.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax1.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax2.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax3.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax4.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax5.axvline(x= i, color='k', linestyle=ls, alpha = alph)

ax1.set_yticklabels([])
ax3.set_yticklabels([])
ax5.set_yticklabels([])

ax0.set_xticklabels([])
ax1.set_xticklabels([])
ax2.set_xticklabels([])
ax3.set_xticklabels([])

ax0.legend(bbox_to_anchor=(0.,1.02,1,0.2), loc="lower center", mode="expand", borderaxespad=0, ncol=3)
mp.subplots_adjust(hspace=0.,wspace=0.)
mp.savefig(name+'_nf16All-fit')
#mp.show()
fig = mp.figure(figsize=(12, 8)) 
grid = mp.GridSpec(3, 2)


frmat = 'bs--'

fig.suptitle('Sigma method (nside = 256)')

ax0 = mp.subplot(grid[0,0])
ax0.set_ylabel(r'FWHM [deg]')
ax0.plot(nus_PLOTALL[0],_fwhm_PLOTALL[0],'ko', label = r'FWHM real')
ax0.plot(nus_PLOTALL[0],_fwhmSigma_mPLOTALL[0], frmat, alpha = 0.4, label= r'FWHM Measured')
ax0.plot(nus_PLOTALL[0],_fwhmSigma_mPLOTALL[0] - _deltaSigma_PLOTALL[0], frmat, label = r'FWHM Unbiased')
ax0.legend(loc = 'upper right')
	
ax1 = mp.subplot(grid[0,1])
ax1.plot(nus_PLOTALL[1],_fwhm_PLOTALL[1],'ko')
ax1.plot(nus_PLOTALL[1],_fwhmSigma_mPLOTALL[1], frmat, alpha = 0.4)
ax1.plot(nus_PLOTALL[1],_fwhmSigma_mPLOTALL[1] - _deltaSigma_PLOTALL[1], frmat)

ax2 = mp.subplot(grid[1:2,0])
ax2.set_ylabel(r'FWHM [deg]')
ax2.plot(nus_PLOTALL[2],_fwhm_PLOTALL[2],'ko')
ax2.plot(nus_PLOTALL[2],_fwhmSigma_mPLOTALL[2], frmat, alpha = 0.4)
ax2.plot(nus_PLOTALL[2],_fwhmSigma_mPLOTALL[2] - _deltaSigma_PLOTALL[2], frmat)

ax3 = mp.subplot(grid[1:2,1])
ax3.plot(nus_PLOTALL[3],_fwhm_PLOTALL[3],'ko')
ax3.plot(nus_PLOTALL[3],_fwhmSigma_mPLOTALL[3], frmat, alpha = 0.4)
ax3.plot(nus_PLOTALL[3],_fwhmSigma_mPLOTALL[3] - _deltaSigma_PLOTALL[3], frmat)

ax4 = mp.subplot(grid[2:3,0])
ax4.set_ylabel(r'FWHM [deg]')
ax4.set_xlabel(r'$\nu$[GHz]')
ax4.set_ylabel(r'FWHM [deg]')
ax4.plot(nus_PLOTALL[4],_fwhm_PLOTALL[4],'ko')
ax4.plot(nus_PLOTALL[4],_fwhmSigma_mPLOTALL[4], frmat, alpha = 0.4)
ax4.plot(nus_PLOTALL[4],_fwhmSigma_mPLOTALL[4] - _deltaSigma_PLOTALL[4], frmat)

ax5 = mp.subplot(grid[2:3,1])
ax5.set_xlabel(r'$\nu$[GHz]')
ax5.plot(nus_PLOTALL[5],_fwhm_PLOTALL[5],'ko')
ax5.plot(nus_PLOTALL[5],_fwhmSigma_mPLOTALL[5], frmat, alpha = 0.4)
ax5.plot(nus_PLOTALL[5],_fwhmSigma_mPLOTALL[5] - _deltaSigma_PLOTALL[5], frmat)

alph = 0.2
ls=':'
for i in nus_in:
    ax0.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax1.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax2.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax3.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax4.axvline(x= i, color='k', linestyle=ls, alpha = alph)
    ax5.axvline(x= i, color='k', linestyle=ls, alpha = alph)

ax1.set_yticklabels([])
ax3.set_yticklabels([])
ax5.set_yticklabels([])

ax0.set_xticklabels([])
ax1.set_xticklabels([])
ax2.set_xticklabels([])
ax3.set_xticklabels([])

ax0.legend(bbox_to_anchor=(0.,1.02,1,0.2), loc="lower center", mode="expand", borderaxespad=0, ncol=3)
mp.subplots_adjust(hspace=0.,wspace=0.)
mp.savefig(name+'_nf16All-sigma')
#mp.show()